==================== Online Resouce ===================
https://docs.docker.com/engine/reference/run/



======================================== Help ==============================
docker --help                             #returns list of managment_commands and commands
docker managment_command --help           #returns list of commands available to the specified managment_command 
docker managment_command command -help--  #returns flags available to the command

=============================== Images  =================================

docker image --help                               #returns image commands
docker image command --help                       #returns flags available to the command
docker image ls                                   #retruns all images
docker images                                     #retruns all images
docker pull imageName                             #pulls the docker image from dockerhub
docker image inspect imageID                      #return json doc of image details

docker image history <IMAGE>                      #returns image layers and commands
docker image history --no-trunc <IMAGE>           #returns layers full id
docker image history --quiet <IMAGE>              #returns layers ids only

docker image save <IMAGE> > <FILE>.tar            #archieve Dockerimage
docker image save <IMAGE> -o <FILE>.tar           #archieve Dockerimage
docker image save <IMAGE> --output <FILE>.tar     #archieve Dockerimage

gzip <file.tar>                                   # compress the archieve dockerimage
gzip -d <file.tar>                                # decompress the archieve dockerimage

docker image load < <FILE>.tar                    #restoring  Dockerimage
docker image load -i <FILE>.tar                   #restoring  Dockerimage
docker image load --input <FILE>.tar              #restoring  Dockerimage

docker tag <Image-ID> <desired Name:Tag>         # tagging image to was jsut restored
# https://stackoverflow.com/questions/43957171/docker-save-load-lose-original-image-repository-name-tag


 
=============================== Dockefile  =================================

docker build -t fortunexfortune/moviesearchapi .  #build image
docker image build -t rivethead42/my-express --no-cache . #build image with not cache

docker build -t portal -f compose/production/Dockerfile .         # build docker image by specifing path to dockerfile

docker image build -t <NAME>:<TAG> .                              #creates a docker image
docker image build -t <NAME>:<TAG>  -f Dockerfile.test .          #-f = Name of the Dockerfile to build
docker image build -t <NAME>:<TAG>  --rm .                        # rm == removes intermidiate containers
docker image build -t <NAME>:<TAG> --label com.forune.version=v1.8 .  #labelling the image
docker image build -t <NAME>:<TAG> - < <FILE>.tar.gz              #Building an image from a tar file

docker image build -t <NAME>:<TAG> <GIT_URL>#<REF>                #building image from github repo
docker image build -t <NAME>:<TAG> <GIT_URL>#:<DIRECTORY>         #building image from github repo folderpath
docker image build -t <NAME>:<TAG> <GIT_URL>#<REF>:<DIRECTORY>    #building image from github repo folderpath # ref = branch


docker image build -t linuxacademy/weather-app:github https://github.com/linuxacademy/content-weather-app.git#remote-build

docker image build -t linuxacademy/nginx:stind --rm -<<EOF        # Buildin an image from standard in
FROM nginx:latest
VOLUME ["/usr/share/nginx/html/"]
EOF

=============================== Tagging strategy  =================================

1) Use our Git commit hash as the image tag:
2) git log -1 --pretty=%H
docker image build -t linuxacademy/weather-app:<GIT_HASH> .

# tagging an image off another image
docker image tag linuxacademy/weather-app:<GIT_HASH> linuxacademy/weather-app:latest


============================== Containers run ======================================

docker container run imageName                  # runs a container
docker container run --name [Name] imageName    # runs a container with specified name
docker container run -P imageName               # -P (CAPITAL)= publishes all container exposed ports to random ports
docker container run -p 8080:80 imageName       # -p (SMALL)=  publishes a container's port(s) to the host port
docker container run -d imageName               # -d = runs the container in the background
docker container run --rm imageName             # Automatically remove container when it exits
docker container run -it imageName /bin/bash    # runs and logs you to the container tty

docker container run -d --name name --restart [POLICY] user:image:latest #there are up to 4 policies
docker container run -d --name name --restart always user:image:latest
docker container run --name moviesearchapi -p 3000:3000 -d fortunexfortune/moviesearchapi:latest


docker run -e MYVAR1 --env MYVAR2=foo --env-file ./env.list ubuntu bash
docker run --env VAR1 --env VAR2 ubuntu 


============================== Containers ======================================

docker container --help                         #returns container commands
docker container <command> --help                 #returns flags available to the command

>>  Managing Containers <<
docker container ls                             # returns list of running containers
docker container ps                             # returns list of running containers
docker container ls -a                          # returns a lsit of all containers

>>  Managing Stopped Container <<
docker container ls -a -q                       # returns all containersID
docker container ls -a -f status=exited         # filters out all stopped containers, can pipe this into count or a bash script

>>  Managing Stopped Container <<
docker container inspect containerID            #return json doc of container details
docker container inspect containerName          #return json doc of container details
docker container start containerID              #Start container
docker container stop containerID               #Stop container
docker container pause containerID              #pauses all running process
docker container unpause containerID            #resumes all running process

>>  Cleaning up <<
docker container rm containerID                 #removes stoped containers
docker container rm -f containerID              #removes running container
docker container prune -f                       #removes all stopped containers


>> monitoring <<
docker container ps                             # returns list of running containers
docker container logs containerID               #returns container logs, useful for torubleshoting containers
docker container logs -f containerID``          # returns logs in real time
docker container stats containerID              #returns cpu and memory usage 
docker stats -a --no-stream >> mystats.csv      # output docker stats into file

docker container top containerID                #returns running processes of a container

>> extra <<
docker commit 5a8f89adeead newimagename         # creates a new image from containers changes (5a8f89adeead = containerID)

============================== Containers exec ======================================

docker container exec -it containerID /bin/bash            #Takes you to the container prompt [ /bin/bash ]
dokcer container exec -it containerID ls /desired/path     #returns output to host standard output
docker container exec -it containerID touch /app/file3.txt #creates a file in the selected folder 
docker container exec -u 0 -it test-build /bin/bash            # login into the contianer as the root user


============================  Networks ================================================
docker network --help                      #returns networking commands
docker network ls                          #return all networks
docker network ls --no-trunc               #Do not truncate the output
docker network inspect [NAME]              #gives details on selected network
docker network create [NAME]               #create a docker network
docker network rm [NAME]                   #deletes selected network
docker network prune -f                    #removes all inactive networks

docker network connect [NetworkName] [ContainerName]  #Attach container to selected network
docker network disconnect br01 network-test03         # Removes a container from a network
docker network inspect bridge                         # return bridge network 

docker network create \
  --driver=bridge \
  --subnet=172.28.0.0/16 \
  --ip-range=172.28.5.0/24 \
  --gateway=172.28.5.254 \
  br0
  

docker container run --name network-test01 -it --network br04 centos /bin/bash # attaching container to multiple netowrks
  
docker network create -d bridge --internal privateNet    # --internal creates a private network

  

============================  Volumes  ================================================

docker volume --help                    #volume guide
docker volume ls                        #list volumes
docker volume create [NAME]             #create a volume
docker volume inspect [NAME]            #Inspecting a volume:
docker volume rm [NAME]                 #Deleting a volume
docker volume prune                     #Removing all unused volumes:

+++++++<-----------------------------------
#Creating a volume using volume mount:
docker volume create html-volume
docker container run -d \
 --name nginx-volume1 \
 --mount type=volume,source=html-volume,target=/usr/share/nginx/html/ \
 nginx#
 
+++++++<-----------------------------------
#Creating a volume using the volume flag:
docker volume create html-volume
docker container run -d \
 --name nginx-volume2 \
 -v html-volume:/usr/share/nginx/html/ \
 nginx
+++++++<-----------------------------------
#Creating a readonly volume:
docker volume create html-volume
docker container run -d \
  --name=nginx-volume3 \
  --mount source=html-volume,target=/usr/share/nginx/html,readonly \
  nginx
============================  Bind Mount  ================================================
+++++++<-----------------------------------
# Bind Mount persistent strorage method1
mkdir target
docker container run -d \
  --name [NAME] \
  --mount type=bind,source="$(pwd)"/target,target=/app \
  nginx
+++++++<-----------------------------------
# Bind Mount persistent strorage method2
docker container run -d \
 --name [NAME] \
 -v "$(pwd)"/target2:/app \
 nginx
 
#the dir target2 is automatically created in the host folder if not present

+++++++<-----------------------------------
# Creating Dockerfile from standard in
docker image build -t <NAME>:<TAG> -<<EOF
FROM nginx:latest
VOLUME ["/usr/share/nginx/html/"]
EOF

+++++++<-----------------------------------
#ENV VARIABLES and Overwritting default env varaibles 
FROM node
LABEL org.label-schema.version=v1.1
ENV NODE_ENV="development"
ENV PORT 3000
RUN mkdir -p /var/node
ADD src/ /var/node/
WORKDIR /var/node
RUN npm install
EXPOSE $PORT
CMD ./bin/www

docker image build -t imageName.
docker container run -d --name image_name -p 8083:3001 \
--env PORT=3001 --env NODE_ENV=production
\ container_Name

+++++++<-----------------------------------
#BUILD Arguments variables and Overwritting default Build Arguments 
LABEL org.label-schema.version=v1.1
ARG SRC_DIR=/var/node
RUN mkdir -p $SRC_DIR
ADD src/ $SRC_DIR
WORKDIR $SRC_DIR
RUN npm install
EXPOSE 3000
CMD ./bin/www

docker image build -t image_name --build-arg SRC_DIR=/var/code .
docker container run -d --name container_name -p 8085:3000 image_name
+++++++<-----------------------------------
#Non Privileged User
FROM centos:latest
RUN useradd -ms /bin/bash cloud_user
USER cloud_user

docker image build -t centos7/nonroot:v1 .
docker container run -it --name test-build centos7/nonroot:v1 /bin/bash
docker container start test-build
docker container exec -u 0 -it test-build /bin/bash    #log you in as root

+++++++<-----------------------------------
#VOLUME instruction to automatically create a mount point in a Docker image.
FROM nginx:latest
VOLUME ["/usr/share/nginx/html/"]

docker image build -t linuxacademy/nginx:v1 .
docker container run -d --name nginx-volume linuxacademy/nginx:v1
docker container inspect nginx-volume



====================== Docker Hub =========================

docker login
docker image push <USERNAME>/<IMAGE_NAME>:<TAG>
docker image tag <IMAGE_NAME>:<TAG> <USERNAME>/<IMAGE_NAME>:<TAG>


====================== Docker Events =========================
docker system events                                       # returns server events
docker system events --since '<TIME_PERIOD>'               # returns server events within a time period
docker system events --since '1h'                          # returns containers events within a time period
docker system events --filter <FILTER_NAME>=<FILTER>       # returns events realted to an object
docker system events --filter type=container --since '1h'  # returns event related to an object ( Network, Image, Container, etc)

docker system events --filter type=container --filter event=attach
docker system events --filter type=container --filter event=start --since '1h' # double filter, fitlering containers start events
docker system events --filter type=container --filter event=attach --filter event=die --filter event=stop


===================== Extras ===============================================

docker container ls -a -f status=exited                   #List all stopped containers
docker container ls -a -q -f status=exited                #List the IDs of stopped containers
docker container ls -a -q -f status=exited | wc -l        #Get a count of all stopped containers
docker container ls -a -f status=exited | grep prometheus #Get a listing of our containers

========================== Docker Swarm =================================

docker swarm init --advertise-addr [PRIVATE_IP]               # Initilize cluster Master
docker swarm join --token [TOKEN] [PRIVATE_IP]:2377           # add node to cluster 

docker node ls                               # Listing nodes:
docker node inspect [NODE_ID]                # Inspecting a node

docker node promote [NODE_ID]                # Promoting a worker to a manager:
docker node demote [NODE_ID]                 # Demoting a manager to a worker:
docker node rm -f [NODE_ID]                  # Removing a node form the swarm 
                                             # if the node is a Manager it must be demoted first
docker swarm leave                           # Make a node leave the swarm [ from node to normal docker host ]
docker swarm join-token worker               # returns worker join-token:
docker swarm join-token manager              # returns manager join-token


>> Volume << 
https://rexray.readthedocs.io/en/stable/user-guide/schedulers/docker/plug-ins/

docker plugin install [PLUGIN] [OPTIONS]  # Installing docker plugin
docker plugin ls                          # list plugin

docker plugin install store/splunk/docker-logging-plugin:2.0.0 --alias splunk-logging-plugin
docker plugin disable [ID]
docker plugin rm [ID]


>> Services <<  

docker service create -d --name nginx_service -p 8080:80 --replicas 2 nginx:latest

docker service create -d --name [NAME] \
-p [HOST_PORT]:[CONTAINER_PORT] \
--replicas [REPLICAS_NUMBER] \
[IMAGE] [CMD]

docker service ls                           # List docker services
docker service logs [NAME]                  # Return logs of the service
docker service inspect [SERVICE_ID]         # inspect a service
docker service ps [SERVICE_ID]              # List all tasks of a service
docker service scale [SERVICE_ID]=3         # Scale a service up or down

docker service update [OPTIONS] [NAME]      # update a running service
docker service update -h                    # There are many upate feauresm have a look at them

>> Network <<  
docker network create -d overlay [NAME]
docker service update --network-add [NETWORK] [SERVICE]             # Add a service to a network:
docker network create -d overlay --opt encrypted encrypted_overlay  # Create an encrypted overlay network

>> Stacks <<  
docker stack deploy --compose-file docker-compose.yml [stackName]
docker stack ls

# https://docs.docker.com/compose/compose-file/#dns
When dealing with docker-compose files for docker stwacs feplyoent, you can read the documentaion above and filter by 
" Note when using docker stack deploy" to know what attributes do not work with docker stack


============================== Tools  ==============================

>> Portainer <<

docker volume create portainer_data

docker container run -d --name portainer -p 9000:9000 \
--restart=always \
-v /var/run/docker.sock:/var/run/docker.sock \
-v portainer_data:/data portainer/portainer

>> WatchTower <<

docker container run -d --name watchtower \
--restart always \
-v /var/run/docker.sock:/var/run/docker.sock \
v2tec/watchtower -i 15


============================== Extras ==============================

docker cp foo.txt mycontainer:/foo.txt # copy file from host to container
docker cp mycontainer:/foo.txt foo.txt # copy file from container to host          

docker update --restart=always <container> # Add a restart policy to a container that was already created
docker container exec -it --user postgres pg-docker /bin/bash  # exec as a user
docker container exec -u 0 -it test-build /bin/bash            # login into the contianer as the root user

docker run -it --user nobody busybox  # run container as a user


# Commit a container with new CMD and EXPOSE instructions
docker commit --change='CMD ["apachectl", "-DFOREGROUND"]' -c "EXPOSE 80" c3f279d17e0a  svendowideit/testimage:version4 


docker rename my_container my_new_container



docker run -t -i centos /bin/bash   # used to  stand containers of an images that do not contain cmd command (do not run any default app)


sudo docker run -it --entrypoint /bin/bash [docker_image]  # overwrite entrypoint
docker inspect --format '{{ .State.Pid }}' [container_id] # Get the process ID for the container



docker container run --name tmp-ubuntu --rm -it ubuntu //bin/bash # ubuntu docker 

==================== READY to GO ====================

sudo docker run -it -v mongodata:/data/db -p 27017:27017 --name mongodb -d mongo



docker container exec -it  -u 0 db  /bin/bash



docker run --rm -d --network host --name my_nginx nginx   # host network



